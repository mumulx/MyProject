<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:aop="http://www.springframework.org/schema/aop" xmlns:cache="http://www.springframework.org/schema/cache"
	   xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.3.xsd">

	<mvc:annotation-driven></mvc:annotation-driven>

	<!-- 加载db.properties文件 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations" value="classpath:db.properties"/>
	</bean>

	<!--配置数据库的信息（代替mybatis的配置文件conf.xml） -->
	<!-- 配置配置数据库信息（替代mybatis的配置文件conf.xml） -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${jdbc.driver}"></property>
		<property name="url" value="${jdbc.url}"></property>
		<property name="username" value="${jdbc.user}"></property>
		<property name="password" value="${jdbc.password}"></property>
		<property name="maxActive" value="${jdbc.maxActive}" />
		<property name="maxWait" value="${jdbc.maxWait}" />
		<property name="maxIdle" value="${jdbc.maxIdle}" />
		<property name="initialSize" value="${jdbc.initialSize}" />
	</bean>

	<!-- 以前的方法是这样管理事务的：使用基于注解方式配置事务 <tx:annotation-driven transaction-manager="transactionManager"/>
 -->
	<bean id="transactionManager"
		  class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 现在使用通知的方式管理 -->
	<tx:advice id="txAdvice"
			   transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 传播行为 -->
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="find*" propagation="SUPPORTS"
					   read-only="true" />
			<tx:method name="query*" propagation="SUPPORTS"
					   read-only="true" />
			<tx:method name="get*" propagation="SUPPORTS"
					   read-only="true" />
			<tx:method name="select*" propagation="SUPPORTS"
					   read-only="true" />
		</tx:attributes>
	</tx:advice>

	<!-- 要扫描的service包 aop -->
	<aop:config>
		<aop:advisor advice-ref="txAdvice"
					 pointcut="execution(* org.ycit.service.impl.*.*(..))" />
	</aop:config>

	<!-- 配置MyBatis需要的核心类：SqlSessionFactory -->
	<!-- 在SpringIoc容器中 创建MyBatis的核心类 SqlSesionFactory -->
	<bean id="sqlSessionFactory"
		  class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<!-- 加载mapper.xml路径 -->
		<property name="mapperLocations"
				  value="classpath:org/ycit/mapper/*.xml"></property>
		<property name="typeAliasesPackage" value="org.ycit.entity" />
		<property name="configLocation" value="classpath:mybatis-config.xml"/>
	</bean>
	<!-- 将MyBatis的SqlSessionFactory 交给Spring -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName"
				  value="sqlSessionFactory"></property>
		<property name="basePackage" value="org.ycit.mapper"></property>
	</bean>
</beans>
